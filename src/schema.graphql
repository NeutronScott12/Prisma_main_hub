# import * from "./generated/prisma.graphql"

type ForgotPasswordResponse {
	ok: Boolean!
	result: String!
}

type LoginResponse {
	ok: Boolean!
	token: String
	refreshToken: String!
	user: User
}

type RegisterResponse {
	ok: Boolean!
	result: String!
}

type Error {
	path: String!
	message: String!
}

type VoidResponse {
	ok: Boolean
	errors: [Error!]
}

type AddFriendResponse {
	ok: Boolean!
	errors: [Error!]
	user: User
}

type FriendRemoveResponse {
	ok: Boolean!
	user: User
}

type Query {
	currentUser: User
	getProfile(username: String!): User
	queryComment(parentId: ID!, limit: Int, offset: Int): CommentConnection!
	queryUsers: [User!]
	showTeam(teamSlug: String!): Team!
	showTeams(authorId: ID!): [Team!]
	showChannel(channelId: ID!): Channel!
	fetchTodos: [Todo!]
}

type Subscription {
	friendRequestSubscription(id: ID!): UserSubscriptionPayload!
	friendSubscription(id: ID!): UserSubscriptionPayload!
	NotificationSubscription(id: ID!): NotificationSubscriptionPayload!
	messageSubscription(channelId: ID!): MessageSubscriptionPayload!
}

type DeleteCommentResponse {
	id: ID
	parentId: ID
}

type Mutation {
	friendRemove(friendId: ID!): FriendRemoveResponse!
	removeChannelMember(channelId: ID!, userId: ID!): Channel!
	createMessage(body: String!, channelId: ID!): Message!
	createChannel(name: String!, teamId: ID!): Channel!
	createTeam(name: String!): Team!
	addTeamMember(userId: ID!, teamId: ID!): Team!
	addChannelMember(userId: ID!, channelId: ID!): Channel!
	createChannelMember(userId: String!, channelId: String!): Channel!
	deleteComment(id: ID!): DeleteCommentResponse!
	editComment(id: ID!, body: String!): Comment!
	login(email: String!, password: String): LoginResponse!
	register(
		email: String!
		username: String!
		password: String!
	): RegisterResponse!
	forgotPassword(email: String!): ForgotPasswordResponse!
	checkToken(token: String!): ForgotPasswordResponse!
	resetPassword(id: ID!, password: String!): ForgotPasswordResponse!
	logout: Boolean!
	authConfirmation(token: String!): ForgotPasswordResponse!
	createComment(
		pageId: ID!
		parentId: ID!
		body: String
		repliedTo: ID
	): Comment!
	createReply(
		pageId: ID!
		parentId: ID!
		body: String
		repliedTo: ID
	): Comment!
	likeComment(commentId: ID!): Comment
	friendRequest(requestedId: ID!): VoidResponse!
	addFriend(requestedId: ID!): AddFriendResponse!
	friendReject(id: ID!): VoidResponse!
	createTodo(body: String!): Todo
	editTodo(id: ID!): Todo
	deleteTodo(id: ID!): Todo
	createTodoProject: TodoProject
	createOrder(totalPrice: Float!): Order
}
